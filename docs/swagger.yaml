basePath: /api/v1
definitions:
  request.CreatePostRequest:
    properties:
      body:
        maxLength: 255
        minLength: 5
        type: string
      title:
        maxLength: 255
        minLength: 5
        type: string
      user_id:
        type: integer
    required:
    - body
    - title
    - user_id
    type: object
  request.CreateUserRequest:
    properties:
      age:
        maximum: 60
        minimum: 18
        type: integer
      email:
        maxLength: 200
        minLength: 5
        type: string
      name:
        maxLength: 200
        minLength: 5
        type: string
      password:
        maxLength: 255
        minLength: 5
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
      username:
        maxLength: 200
        minLength: 5
        type: string
    required:
    - age
    - email
    - name
    - password
    - phone
    - username
    type: object
  request.LoginUserRequest:
    properties:
      password:
        maxLength: 255
        minLength: 5
        type: string
      username:
        maxLength: 200
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  request.UpdatePostRequest:
    properties:
      body:
        maxLength: 255
        minLength: 5
        type: string
      title:
        description: ID    int    `validate:"required" json:"post_id"`
        maxLength: 255
        minLength: 5
        type: string
    required:
    - body
    - title
    type: object
  request.UpdateUserRequest:
    properties:
      age:
        maximum: 60
        minimum: 18
        type: integer
      email:
        maxLength: 200
        minLength: 5
        type: string
      name:
        description: ID    int    `validate:"required" json:"user_id"`
        maxLength: 200
        minLength: 5
        type: string
      phone:
        maxLength: 15
        minLength: 10
        type: string
    required:
    - age
    - email
    - name
    - phone
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8888
info:
  contact: {}
  description: A demo Service API in Golang using Gin Framework
  title: Demo Service API
  version: 1.0.0
paths:
  /posts:
    get:
      consumes:
      - application/json
      description: Returns a list of post
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all post
    post:
      consumes:
      - application/json
      description: Save post in database
      parameters:
      - description: Create post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/request.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create post
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: Delete post from database
      parameters:
      - description: Delete post by id
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete post
    get:
      consumes:
      - application/json
      description: Returns a single post when postId maches id
      parameters:
      - description: Find post by id
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a single post by its id
    put:
      consumes:
      - application/json
      description: Update and save post in database
      parameters:
      - description: Update post by id
        in: path
        name: postId
        required: true
        type: string
      - description: Update post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update post
  /users:
    get:
      consumes:
      - application/json
      description: Returns a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all users
    post:
      consumes:
      - application/json
      description: Save user in database
      parameters:
      - description: Create user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create user
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete user from database
      parameters:
      - description: Delete user by id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete user
    get:
      consumes:
      - application/json
      description: Returns a single user when userId maches id
      parameters:
      - description: Find user by id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a single user by its id
    put:
      consumes:
      - application/json
      description: Update and save user in database
      parameters:
      - description: Update user by id
        in: path
        name: userId
        required: true
        type: string
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
  /users/Logout:
    post:
      consumes:
      - application/json
      description: Logout user in database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout authenticated user
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user in database
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
  /users/user:
    post:
      consumes:
      - application/json
      description: Get user in database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get authenticated user
swagger: "2.0"
